"""BMI30.200.py ‚Äî –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∂–∏–≤—É—é –æ—Å—Ü–∏–ª–ª–æ–≥—Ä–∞–º–º—É Vendor Bulk —Å—Ç–µ—Ä–µ–æ –ø–æ—Ç–æ–∫–∞."""

from __future__ import annotations
import os
import sys, time, json, os as _os_alias
# Qt env: avoid GTK theme/plugin conflicts on RPi (Bookworm)
os.environ.setdefault("QT_QPA_PLATFORM", "xcb")
os.environ.setdefault("QT_STYLE_OVERRIDE", "Fusion")
os.environ.pop("QT_QPA_PLATFORMTHEME", None)
import numpy as np  # type: ignore

try:
	from usb_vendor.usb_stream import USBStream, CMD_SET_PROFILE, CMD_STOP_STREAM, CMD_START_STREAM  # type: ignore
except Exception:
	from usb_vendor.usb_stream import USBStream  # type: ignore
	CMD_SET_PROFILE = 0x14
	CMD_STOP_STREAM = 0x21
	CMD_START_STREAM = 0x20
	CMD_GET_STATUS = 0x30
	CMD_SOFT_RESET = 0x7E
	CMD_DEEP_RESET = 0x7F
	CMD_SET_ALT = 0x31

# Qt/pyqtgraph bootstrap: enforce PyQt5 first to keep binding consistent
PG_IMPORT_ERR = None
try:
	# Tell pyqtgraph which Qt lib to use
	os.environ.setdefault("PYQTGRAPH_QT_LIB", "PyQt5")
	from PyQt5 import QtWidgets, QtCore  # type: ignore
	import pyqtgraph as pg  # type: ignore
except Exception as e1:  # pragma: no cover
	try:
		os.environ["PYQTGRAPH_QT_LIB"] = "PySide6"
		from PySide6 import QtWidgets, QtCore  # type: ignore
		import pyqtgraph as pg  # type: ignore
	except Exception as e2:
		PG_IMPORT_ERR = e1


class ScopeWindow:
	def __init__(self):
		if PG_IMPORT_ERR:
			print(f"[ERR] pyqtgraph/Qt import failed: {PG_IMPORT_ERR}")
			sys.exit(2)
		self.app = QtWidgets.QApplication.instance() or QtWidgets.QApplication(sys.argv)
		self.win = QtWidgets.QMainWindow()
		self.win.setWindowTitle("BMI30 Vendor Bulk Oscilloscope")
		central = QtWidgets.QWidget()
		self.win.setCentralWidget(central)
		layout = QtWidgets.QVBoxLayout(central)
		# legend (–≤–º–µ—Å—Ç–æ –≤–µ—Ä—Ö–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫)
		self.legend_lbl = QtWidgets.QLabel("--")
		font = self.legend_lbl.font()
		font.setPointSize(font.pointSize()+1)
		self.legend_lbl.setFont(font)
		legend_bar = QtWidgets.QHBoxLayout()
		legend_bar.addWidget(self.legend_lbl, 1)
		# –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
		self.freq_box = QtWidgets.QComboBox()
		self.freq_box.addItems(["200 Hz","300 Hz"])
		self.freq_box.setCurrentIndex(0)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 200 –ì—Ü
		self.freq_box.currentIndexChanged.connect(self._on_freq_change)
		legend_bar.addWidget(self.freq_box, 0)
		self.btn_reconnect = QtWidgets.QPushButton("‚Üª")
		self.btn_reconnect.setToolTip("–†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É")
		self.btn_reconnect.clicked.connect(self._manual_reconnect)
		legend_bar.addWidget(self.btn_reconnect, 0)
		# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Ç–∫–∏ USB-–ø–æ—Ä—Ç–∞ (—á–µ—Ä–µ–∑ uhubctl)
		self.btn_power = QtWidgets.QPushButton("‚ö°")
		self.btn_power.setToolTip("–ü–µ—Ä–µ–ø–æ–¥–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ USB-–ø–æ—Ä—Ç—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (uhubctl)")
		self.btn_power.clicked.connect(self._power_cycle_usb_port)
		legend_bar.addWidget(self.btn_power, 0)
		# –ö–Ω–æ–ø–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –º—è–≥–∫–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
		self.btn_diag = QtWidgets.QPushButton("ü©∫")
		self.btn_diag.setToolTip("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ EP0/STAT, SOFT_RESET/DEEP_RESET, alt 0/1")
		self.btn_diag.clicked.connect(self._diagnose_and_kick)
		legend_bar.addWidget(self.btn_diag, 0)
		layout.addLayout(legend_bar)
		# plots
		self.plotw = pg.GraphicsLayoutWidget()
		layout.addWidget(self.plotw, 1)
		self.p0 = self.plotw.addPlot(row=0, col=0, title="ADC0")
		self.p1 = self.plotw.addPlot(row=1, col=0, title="ADC1")
		self.curve0 = self.p0.plot(pen=None, symbol='o', symbolSize=2, symbolPen=None, symbolBrush=pg.mkBrush('#2ecc71'))
		self.curve1 = self.p1.plot(pen=None, symbol='o', symbolSize=2, symbolPen=None, symbolBrush=pg.mkBrush('#3498db'))
		self.p0.showGrid(x=True, y=True, alpha=0.3)
		self.p1.showGrid(x=True, y=True, alpha=0.3)
		# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º X-–æ—Å–∏ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
		try:
			self.p1.setXLink(self.p0)
		except Exception:
			pass
		# –æ—Ç–∫–ª—é—á–∏–º –∞–≤—Ç–æ-—Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –ø–æ X (–±—É–¥–µ–º —Å–∞–º–∏ –∑–∞–¥–∞–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω)
		self.p0.disableAutoRange(axis=pg.ViewBox.XAxis)
		self.p1.disableAutoRange(axis=pg.ViewBox.XAxis)
		self.p0.enableAutoRange(y=True)
		self.p1.enableAutoRange(y=True)
		self.expected_len_map = {1:1360, 2:912}
		self.initial_expected = self.expected_len_map.get(1, 1360)
		# —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞ –¥–ª—è ~20 FPS –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º
		self.ns_map = {1:10, 2:15}
		# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–µ–º Ns —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É (–º–∞–∫—Å. FPS). –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É Ns: BMI30_SEND_NS=1
		try:
			self.send_ns = str(os.getenv("BMI30_SEND_NS", "0")).lower() not in ("0","false","no")
		except Exception:
			self.send_ns = False
		# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞–¥—Ä—ã –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –≤—ã–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤–∫–ª—é—á–∏—Ç—å: BMI30_TEST_AS_DATA=1)
		try:
			self.test_as_data = str(os.getenv("BMI30_TEST_AS_DATA", "0")).lower() not in ("0","false","no")
		except Exception:
			self.test_as_data = False
		# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –Ω—É–ª–µ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–ö–õ–Æ–ß–ï–ù–û, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–µ–º–ø–ª—ã "–∫–∞–∫ –µ—Å—Ç—å")
		try:
			self.show_zero = str(os.getenv("BMI30_SHOW_ZERO", "1")).lower() not in ("0","false","no")
		except Exception:
			self.show_zero = True
		# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∫–∞–ª–æ–π Y: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ-–ü–û–î–°–¢–†–û–ô–ö–ê –í–´–ö–õ–Æ–ß–ï–ù–ê ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
		try:
			self.y_auto = str(os.getenv("BMI30_Y_AUTO", "0")).lower() not in ("0","false","no")
		except Exception:
			self.y_auto = False
		try:
			self.y_min = float(os.getenv("BMI30_Y_MIN", "-32768"))
		except Exception:
			self.y_min = -32768.0
		try:
			self.y_max = float(os.getenv("BMI30_Y_MAX", "32767"))
		except Exception:
			self.y_max = 32767.0
		# –ü—Ä–∏–º–µ–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Y —Å—Ä–∞–∑—É
		try:
			self.p0.enableAutoRange(y=self.y_auto)
			self.p1.enableAutoRange(y=self.y_auto)
			if not self.y_auto:
				self.p0.setYRange(self.y_min, self.y_max, padding=0.02)
				self.p1.setYRange(self.y_min, self.y_max, padding=0.02)
		except Exception:
			pass
		# plots –∏–¥—É—Ç –∑–¥–µ—Å—å, –Ω–∏–∂–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ
		# data
		self.base_buf_len: int | None = None  # –±—É–¥–µ—Ç 1360 –∏–ª–∏ 912 (–∏–ª–∏ –∏–Ω–æ–µ) –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
		self.base_buf_len_bytes: int | None = None
		self.freq_hz: int | None = None
		self.ring_factor = 1  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–¥–∏–Ω –±—É—Ñ–µ—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä)
		try:
			self.initial_view_mult = float(os.getenv("BMI30_INITIAL_VIEW_MULT", "0.25"))  # —Å–∫–æ–ª—å–∫–æ –±—É—Ñ–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ (0.25 –¥–ª—è ~340 —Å–µ–º–ø–ª–æ–≤, –Ω–æ –¥–ª—è –æ—Å—Ü–∏–ª–ª–æ–≥—Ä–∞—Ñ–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
		except Exception:
			self.initial_view_mult = 0.25
		# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å (–∞ –Ω–µ –≤ GUI) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		self.diag_to_console = str(os.getenv("BMI30_DIAG_TO_CONSOLE", "1")).lower() not in ("0","false","no")
		# –û—Å—å X –≤—Å–µ–≥–¥–∞ –≤ —Å–µ–º–ø–ª–∞—Ö (–ø–æ –¢–ó): —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–Ω—É—é —à–∫–∞–ª—É, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
		self.use_time_axis = False
		# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –æ—Å–∏ X, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–∏
		self._axis0_tickStrings_orig = None
		self._axis1_tickStrings_orig = None
		self.max_samples = 0  # —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä—É –∫–∞–¥—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞
		self.data0 = np.zeros(0, dtype=np.int16)
		self.data1 = np.zeros(0, dtype=np.int16)
		self.timestamps = np.zeros(0, dtype=np.float64)  # timestamps –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–º–ø–ª–∞
		self.last_seq = None
		self.gap_count = 0
		self.frames_sec_pairs = 0
		self.last_fps_t = time.time()
		self.fps = 0.0
		self.last_range_t = 0.0
		self.max_int16_span = 33000  # –ø—Ä–µ–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ –∞–º–ø–ª–∏—Ç—É–¥–µ
		self._y_span_smooth = None  # —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π —Å–ø–∞–Ω –ø–æ Y
		# –æ–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		self.view_start = 0
		self.view_len = 0  # –≤—ã—Å—Ç–∞–≤–∏–º –∫–æ–≥–¥–∞ —É–∑–Ω–∞–µ–º –¥–ª–∏–Ω—É –±—É—Ñ–µ—Ä–∞
		self.desired_profile = 1  # 1=>200 –ì—Ü, 2=>300 –ì—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 200 –ì—Ü)
		self.connect_t = 0.0
		self.last_frame_t = 0.0
		self.no_data_warned = False
		self.last_diag_t = 0.0
		# –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É), —á—Ç–æ–±—ã –Ω–µ —Ä—É–≥–∞—Ç—å—Å—è –Ω–∞ "–æ—Å—Ç–∞–Ω–æ–≤–∫—É" –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–∞—Ä
		self._last_rx_seen = 0.0
		self._last_sample_ts: float | None = None
		# –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
		try:
			self.diag_interval = float(os.getenv("BMI30_DIAG_INTERVAL", "10"))  # –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 10—Å
		except Exception:
			self.diag_interval = 10.0
		try:
			self.stop_warn_after = float(os.getenv("BMI30_STOP_WARN_AFTER", "5"))  # –ø–æ—Ä–æ–≥ –ø—Ä–æ—Å—Ç–æ—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —Å–µ–∫
		except Exception:
			self.stop_warn_after = 5.0
		self._instr = ("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: 1) –ü—Ä–æ—à–∏–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å START_STREAM (0x20) –∏ —Å–ª–∞—Ç—å –∫–∞–¥—Ä—ã vendor bulk –Ω–∞ EP IN 0x83. "
			"SET_PROFILE (0x14) 1=200–ì—Ü / 2=300–ì—Ü –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ GUI). "
			"–ö–∞–∂–¥—ã–π –∫–∞–¥—Ä: –∑–∞–≥–æ–ª–æ–≤–æ–∫ 32 –±–∞–π—Ç–∞ (magic 0xA55A LE), —Ñ–ª–∞–≥–∏ 0x01 (ADC0) –∏ 0x02 (ADC1) —á–µ—Ä–µ–¥—É—é—Ç—Å—è, total_samples=1360 –¥–ª—è 200–ì—Ü –∏–ª–∏ 912 –¥–ª—è 300–ì—Ü, payload = samples*2 –±–∞–π—Ç. "
			"–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä (flag 0x80) –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω –≤ –Ω–∞—á–∞–ª–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è. 4) –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (udev) –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è. 5) –ö–Ω–æ–ø–∫–∞ 1 –≤ GUI –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫.")
		# —Å—Ç–∞—Ç—É—Å: —É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –º–∏–≥–∞–ª–∏
		self._status_hold_text: str | None = None
		self._status_hold_until: float = 0.0
		self._last_status_text: str | None = None
		self._last_default_update_t: float = 0.0
		# stream (–ª–µ–Ω–∏–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–æ –∫–Ω–æ–ø–∫–µ 1)
		self.stream = None
		self._connecting = False
		self.usb_retry_timer = QtCore.QTimer()
		self.usb_retry_timer.setInterval(1500)
		self.usb_retry_timer.timeout.connect(self._try_connect)
		self._set_status("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 1 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ (200 –ì—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
		# –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ—Ä—Ç info –¥–ª—è power cycle –±–µ–∑ stream
		self.last_port_info = None
		# timer
		self.timer = QtWidgets.QApplication.instance().thread()  # dummy keep
		self.qtimer = QtCore.QTimer()
		# –ß—É—Ç—å —Ä–µ–∂–µ —Ç–∏–∫–∞–µ–º, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –º–µ—Ä—Ü–∞–Ω–∏–µ –∏ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU
		self.qtimer.setInterval(60)
		self.qtimer.timeout.connect(self._tick)
		self.qtimer.start()
		# –∞–≤—Ç–æ-–∫–∏–∫ –ø—Ä–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–∏
		self.auto_soft_kick = str(os.getenv("BMI30_AUTO_SOFT_KICK", "1")).lower() not in ("0","false","no")
		self.last_soft_kick_t = 0.0
		# –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å: —Å–ª–µ–≤–∞ —Å–ª–∞–π–¥–µ—Ä—ã, —Å–ø—Ä–∞–≤–∞ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
		bottom = QtWidgets.QHBoxLayout()
		layout.addLayout(bottom)
		sliders_box = QtWidgets.QVBoxLayout()
		bottom.addLayout(sliders_box, 1)
		# –û—Å—å X —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å—ã —Å–µ–º–ø–ª–æ–≤
		# –°—Ç–∞—Ä—Ç
		row_start = QtWidgets.QHBoxLayout()
		self.lbl_start_value = QtWidgets.QLabel("0")
		self.slider_start = QtWidgets.QSlider(QtCore.Qt.Orientation.Horizontal)
		self.slider_start.setEnabled(False)
		self.slider_start.setMinimum(0)
		self.slider_start.setMaximum(0)
		self.slider_start.setValue(0)
		lbl_start_name = QtWidgets.QLabel("–°—Ç–∞—Ä—Ç")
		row_start.addWidget(self.lbl_start_value)
		row_start.addWidget(self.slider_start, 1)
		row_start.addWidget(lbl_start_name)
		sliders_box.addLayout(row_start)
		# –°–µ–º–ø–ª–æ–≤
		row_len = QtWidgets.QHBoxLayout()
		self.lbl_len_value = QtWidgets.QLabel("0")
		self.slider_len = QtWidgets.QSlider(QtCore.Qt.Orientation.Horizontal)
		self.slider_len.setEnabled(False)
		self.slider_len.setMinimum(0)
		self.slider_len.setMaximum(0)
		self.slider_len.setValue(0)
		lbl_len_name = QtWidgets.QLabel("–°–µ–º–ø–ª–æ–≤")
		row_len.addWidget(self.lbl_len_value)
		row_len.addWidget(self.slider_len, 1)
		row_len.addWidget(lbl_len_name)
		sliders_box.addLayout(row_len)
		# —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞
		self.state_file = os.path.join(os.path.dirname(__file__), 'bmi30_sel.json')
		self.sel_saved = self._load_saved_sel()
		self.num_group = QtWidgets.QButtonGroup()
		self.num_group.setExclusive(True)
		self.num_buttons = []
		btns_layout = QtWidgets.QHBoxLayout()
		for i in range(8):
			b = QtWidgets.QToolButton()
			b.setText(str(i))
			b.setCheckable(True)
			b.setAutoExclusive(True)
			b.setFixedSize(42, 42)
			b.setStyleSheet("QToolButton {background:#333; color:#ddd; border:1px solid #555; padding:2px;} "
				"QToolButton:checked {background:#ffb400; color:#000; border:2px solid #ffea8a; font-weight:bold;}" )
			self.num_group.addButton(b, i)
			btns_layout.addWidget(b)
			self.num_buttons.append(b)
		# –±–µ–∑ stretch ‚Äî —Å–ª–∞–π–¥–µ—Ä—ã —Ç—è–Ω—É—Ç—Å—è –¥–æ –∫–Ω–æ–ø–æ–∫
		bottom.addLayout(btns_layout)
		# apply saved selection
		if self.sel_saved and 1 <= self.sel_saved <=7:
			self.num_buttons[self.sel_saved].setChecked(True)
		else:
			self.num_buttons[0].setChecked(True)
		self.num_group.idClicked.connect(self._num_clicked)
		self.win.closeEvent = self._on_close  # type: ignore
		# slider signals
		self.slider_start.valueChanged.connect(self._on_slider_start)
		self.slider_len.valueChanged.connect(self._on_slider_len)

		# –ü—Ä–∏–º–µ–Ω–∏–º —Ä–µ–∂–∏–º –æ—Å–∏ X –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
		self._apply_x_axis_mode()

		# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á—ë–Ω)
		try:
			_autostart = str(os.getenv("BMI30_AUTOSTART", "1")).lower() not in ("0","false","no")
		except Exception:
			_autostart = True
		if _autostart:
			# –ü–µ—Ä–µ–∫–ª—é—á–∏–º –≤—ã–±–æ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É 1 –∏ –∑–∞–ø—É—Å—Ç–∏–º –ø–æ—Ç–æ–∫
			if self.num_group.checkedId() != 1:
				self.num_buttons[1].setChecked(True)
			self._activate_stream()

	# (–∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–æ–º —É–¥–∞–ª–µ–Ω—ã –ø–æ –¢–ó)

	# --- numeric buttons persistence ---
	def _num_clicked(self, idx: int):
		if idx == 1:
			if self.stream is None and not self._connecting:
				self._activate_stream()
		elif self.stream is not None and idx != 1:
			try:
				self.stream.close()
			except Exception:
				pass
			self.stream = None
			self.base_buf_len = None
			self.base_buf_len_bytes = None
			self.freq_hz = None
			self.data0 = np.zeros(0, dtype=np.int16)
			self.data1 = np.zeros(0, dtype=np.int16)
			self.timestamps = np.zeros(0, dtype=np.float64)
			self._last_sample_ts = None
			self.view_len = 0
			self.slider_start.setEnabled(False)
			self.slider_len.setEnabled(False)
			self._set_status("–ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞–∂–º–∏—Ç–µ 1 –¥–ª—è –∑–∞–ø—É—Å–∫–∞)", hold_sec=2.0)
		if idx == 0:
			try:
				if os.path.exists(self.state_file):
					os.remove(self.state_file)
			except Exception:
				pass
			print('[sel] 0 (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)')
			return
		try:
			with open(self.state_file, 'w', encoding='utf-8') as f:
				json.dump({'sel': idx, 'ts': int(time.time())}, f)
			print(f'[sel] saved {idx}')
		except Exception as e:
			print('[sel] save err', e)

	def _load_saved_sel(self) -> int | None:
		try:
			with open(os.path.join(os.path.dirname(__file__), 'bmi30_sel.json'), 'r', encoding='utf-8') as f:
				obj = json.load(f)
			return int(obj.get('sel'))
		except Exception:
			return None

	def _tick(self):
		if self.stream is None:
			self._last_sample_ts = None
			if self.num_group.checkedId() == 1:
				if not self._connecting:
					self._set_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶", hold_sec=1.5)
			else:
				self._set_status("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 1 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞")
			# –¥–æ –¥–∞–Ω–Ω—ã—Ö –≤—ã—Å—Ç–∞–≤–∏–º –æ–∂–∏–¥–∞–µ–º—ã–π X –¥–∏–∞–ø–∞–∑–æ–Ω
			self._apply_x_range(0, self.initial_expected)
			return
		got = 0
		try:
			# –µ—Å–ª–∏ –ø–æ—Ç–æ–∫ –≤ —Ñ–æ–Ω–µ —Å–æ–æ–±—â–∏–ª disconnected (EPIPE/ENODEV/EBUSY), –º—è–≥–∫–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–º—Å—è
			if getattr(self.stream, 'disconnected', False):
				try:
					self.stream.close()
				except Exception:
					pass
				self.stream = None
				self._last_sample_ts = None
				self._set_status("USB –∑–∞–Ω—è—Ç/–æ—Ç–∫–ª—é—á—ë–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶", hold_sec=2.0)
				self.usb_retry_timer.start()
				return
			# –æ–±–Ω–æ–≤–∏–º –æ—Ç–º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—ë–º–∞ –≤–æ–æ–±—â–µ (STAT/TEST/–¥–∞–Ω–Ω—ã–µ)
			rx_t = float(getattr(self.stream, 'last_rx_t', 0.0))
			if rx_t > self._last_rx_seen:
				# –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –≤–∏—Å–µ–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ/–Ω–µ—Ç –ø—Ä–∏—ë–º–∞ ‚Äî —Å–±—Ä–æ—Å–∏–º –µ–≥–æ –ø—Ä–∏ –Ω–æ–≤–æ–º —Ç—Ä–∞—Ñ–∏–∫–µ
				if self._status_hold_text and any(x in self._status_hold_text for x in ("–ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è", "–ù–µ—Ç –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–µ—Ä–µ–æ–ø–∞—Ä")):
					self._status_hold_text = None
				self._last_rx_seen = rx_t
			while True:
				pair = self.stream.get_stereo(timeout=0.0)
				if not pair:
					break
				a, b = pair
				self.last_frame_t = time.time()
				ch0 = np.frombuffer(a.payload, dtype='<i2')
				ch1 = np.frombuffer(b.payload, dtype='<i2')
				if self.base_buf_len is None:
					# –ë–∞–∑–æ–≤–∞—è –¥–ª–∏–Ω–∞ = —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–º–ø–ª–æ–≤
					length_guess = len(ch0)
					self.base_buf_len = length_guess
					self.base_buf_len_bytes = self.base_buf_len * 2
					if self.base_buf_len == 1360:
						self.freq_hz = 200
					elif self.base_buf_len == 912:
						self.freq_hz = 300
					else:
						self.freq_hz = None
					self.max_samples = self.base_buf_len
					self.data0 = np.zeros(self.max_samples, dtype=np.int16)
					self.data1 = np.zeros(self.max_samples, dtype=np.int16)
					self.timestamps = np.zeros(self.max_samples, dtype=np.float64)
					# –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –±—É—Ñ–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
					self.view_start = 0
					self.view_len = self.base_buf_len
					self.slider_start.setEnabled(True)
					self.slider_len.setEnabled(True)
					self.slider_len.setMinimum(1)
					self.slider_len.setMaximum(self.base_buf_len)
					self.slider_len.setValue(self.view_len)
					self.slider_start.setMaximum(self.base_buf_len - self.view_len)
					self.slider_start.setValue(self.view_start)
					self.lbl_start_value.setText(str(self.view_start))
					self.lbl_len_value.setText(str(self.view_len))
				self.data0[:len(ch0)] = ch0
				self.data1[:len(ch1)] = ch1
				if len(ch0) < self.base_buf_len:
					self.data0[len(ch0):] = 0
				if len(ch1) < self.base_buf_len:
					self.data1[len(ch1):] = 0
				if self.freq_hz:
					dt = 1.0 / self.freq_hz
					ts_start = a.timestamp / 1_000_000.0
					ts = ts_start + np.arange(len(ch0)) * dt
					self.timestamps[:len(ts)] = ts
					if len(ts) < self.base_buf_len:
						self.timestamps[len(ts):] = 0.0
					# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø–∞—É–∑—ã –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ (–º–µ–∂–¥—É —Å–µ–º–ø–ª–∞–º–∏)
					if len(ts) > 1 and ts[-1] - ts[-2] > dt * 2:
						pause_ms = (ts[-1] - ts[-2]) * 1000
						print(f"[pause] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—É–∑–∞ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞: {pause_ms:.1f}–º—Å")
					if len(ch0):
						if self._last_sample_ts is not None:
							gap = ts_start - self._last_sample_ts
							if gap > dt * 2:
								pause_ms = gap * 1000
								print(f"[pause] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö: {pause_ms:.1f}–º—Å")
						self._last_sample_ts = ts[len(ch0)-1]
				else:
					self._last_sample_ts = None
				if self.last_seq is not None:
					exp = (self.last_seq + 1) & 0xFFFFFFFF
					if a.seq != exp:
						self.gap_count += 1
				self.last_seq = a.seq
				got += 1
				# –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –≤–∏—Å–µ–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –µ–≥–æ —Å—Ä–∞–∑—É
				if self._status_hold_text and "–ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è" in self._status_hold_text:
					self._status_hold_text = None
		except Exception as e:
			# –µ—Å–ª–∏ EBUSY/EPIPE ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –º–∏–≥–∞–ª —Ç–µ–∫—Å—Ç
			msg = str(e)
			if any(x in msg for x in ("Resource busy", "[Errno 16]", "[Errno 32]", "[Errno 19]")):
				try:
					self.stream.close()
				except Exception:
					pass
				self.stream = None
				self._set_status("USB –∑–∞–Ω—è—Ç, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶", hold_sec=2.0)
				self.usb_retry_timer.start()
				return
			self._set_status(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}", hold_sec=2.0)
			return
		# –æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ
		if self.base_buf_len is not None:
			vlen = max(1, min(int(self.slider_len.value()), self.base_buf_len))
			max_start = max(0, len(self.data0) - vlen)
			self.slider_start.setMaximum(max(0, self.base_buf_len - vlen))
			vstart = min(int(self.slider_start.value()), max_start)
			vlen = min(vlen, len(self.data0) - vstart)  # –Ω–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
			self.view_start = vstart
			self.view_len = vlen
			seg0 = self.data0[vstart:vstart+vlen]
			seg1 = self.data1[vstart:vstart+vlen]
			x = np.arange(vlen)
			if len(seg0) > 0 and (self.show_zero or not np.all(seg0 == 0)):
				self.curve0.setData(x, seg0)
			else:
				self.curve0.setData([], [])
			if len(seg1) > 0 and (self.show_zero or not np.all(seg1 == 0)):
				self.curve1.setData(x, seg1)
			else:
				self.curve1.setData([], [])
			self._apply_x_range(0, self.view_len or self.initial_expected)
			self.lbl_start_value.setText(str(vstart))
			self.lbl_len_value.setText(str(vlen))
			self.frames_sec_pairs += got
		now = time.time()
		if now - self.last_fps_t >= 1.0:
			self.fps = self.frames_sec_pairs / (now - self.last_fps_t)
			self.frames_sec_pairs = 0
			self.last_fps_t = now
		# auto symmetric y-range update (0.5s throttle) ‚Äî –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ BMI30_Y_AUTO=1
		if self.y_auto and (now - self.last_range_t > 0.5) and (len(self.data0) or len(self.data1)):
			try:
				maxv = 1
				if len(self.data0):
					maxv = max(maxv, int(np.max(self.data0)))
					maxv = max(maxv, abs(int(np.min(self.data0))))
				if len(self.data1):
					maxv = max(maxv, int(np.max(self.data1)))
					maxv = max(maxv, abs(int(np.min(self.data1))))
				# –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω—É–ª—è
				span = max(64, maxv * 1.05)
				# —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–∞–¥–æ–≤ –∞–º–ø–ª–∏—Ç—É–¥—ã
				alpha = 0.25
				if self._y_span_smooth is None:
					self._y_span_smooth = span
				else:
					self._y_span_smooth = alpha * span + (1 - alpha) * self._y_span_smooth
				self.p0.setYRange(-self._y_span_smooth, self._y_span_smooth, padding=0.02)
				self.p1.setYRange(-self._y_span_smooth, self._y_span_smooth, padding=0.02)
			except Exception:
				pass
			self.last_range_t = now
		buf_info = ""
		if self.base_buf_len is not None:
			freq_part = f" FREQ:{self.freq_hz}Hz" if self.freq_hz else ""
			buf_info = f" BUF:{self.base_buf_len}({self.base_buf_len_bytes}B){freq_part}"
		self.legend_lbl.setWordWrap(True)
		_default_status = f"FPS:{self.fps:.1f} CH0:{len(self.data0)} GAP:{self.gap_count} SEQ:{self.last_seq} VIEW[{self.view_start}:{self.view_start+self.view_len}]{buf_info}"
		# –ü–µ—á–∞—Ç–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ hold
		_now_for_default = time.time()
		if (self._status_hold_text is None or _now_for_default >= self._status_hold_until) and (_now_for_default - self._last_default_update_t >= 1.0):
			self._set_status(_default_status)
			self._last_default_update_t = _now_for_default
		# –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
		now2 = time.time()
		if self.stream and self.base_buf_len is None and self.connect_t and (now2-self.connect_t)>2.0 and not self.no_data_warned:
			# –ù–µ –¥—ë—Ä–≥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ; –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º ‚Üª
			try:
				if hasattr(self.stream, 'test_seen') and getattr(self.stream, 'test_seen', 0) > 0:
					# –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å last_stat –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
					st = getattr(self.stream, 'last_stat', None)
					if isinstance(st, (bytes, bytearray)) and len(st) >= 16:
						# STAT v1 layout: 0:4='STAT', 4=ver(u8), 5=reserved0, 6:8=cur_samples(u16), 8:10=frame_bytes(u16)
						ver = st[4]
						cur_samples = int.from_bytes(st[6:8],'little')
						frame_bytes = int.from_bytes(st[8:10],'little')
						self._set_status(f"–ï—Å—Ç—å TEST, –Ω–æ –Ω–µ—Ç A/B. STAT v{ver} cur_samples={cur_samples} frame_bytes={frame_bytes}. –ù–∞–∂–º–∏—Ç–µ ‚Üª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–∏–Ω–∫–∞.", hold_sec=2.0)
					else:
						self._set_status("–ï—Å—Ç—å TEST, –Ω–æ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∫–∞–¥—Ä–æ–≤ A/B. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—à–∏–≤–∫—É: —Ñ–∏–∫—Å–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ADC0/ADC1 –ø–æ—Å–ª–µ TEST. –ù–∞–∂–º–∏—Ç–µ ‚Üª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–∏–Ω–∫–∞.", hold_sec=2.0)
				else:
					self._set_status("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–µ—Ç –ø–µ—Ä–≤—ã—Ö –∫–∞–¥—Ä–æ–≤). –ù–∞–∂–º–∏—Ç–µ ‚Üª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏. " + self._instr, hold_sec=2.0)
			except Exception:
				self._set_status("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–µ—Ç –ø–µ—Ä–≤—ã—Ö –∫–∞–¥—Ä–æ–≤). –ù–∞–∂–º–∏—Ç–µ ‚Üª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏. " + self._instr, hold_sec=2.0)
			self.no_data_warned = True
		elif self.stream and (now2 - float(getattr(self.stream, 'last_rx_t', 0.0))) > self.stop_warn_after and (now2 - self.last_diag_t) > self.diag_interval:
			# –°–æ–≤—Å–µ–º –Ω–µ—Ç –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∏ STAT, –Ω–∏ –∫–∞–¥—Ä–æ–≤)
			if self.diag_to_console:
				print(f"[diag] –ù–µ—Ç –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö >{int(self.stop_warn_after)}—Å. –í–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–ª–æ —Å–ª–∞—Ç—å.")
			else:
				self._set_status(f"–ù–µ—Ç –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö >{int(self.stop_warn_after)}—Å. –í–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–ª–æ —Å–ª–∞—Ç—å. " + self._instr, hold_sec=4.0)
			self.last_diag_t = now2
		elif self.stream and self.base_buf_len is not None and (now2 - self.last_frame_t) > self.stop_warn_after and (now2 - self.last_diag_t) > self.diag_interval:
			# –ü—Ä–∏—ë–º –∏–¥—ë—Ç, –Ω–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–µ—Ä–µ–æ–ø–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω A/B)
			if self.diag_to_console:
				print(f"[diag] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–µ—Ä–µ–æ–ø–∞—Ä >{int(self.stop_warn_after)}—Å (–ø—Ä–∏—ë–º –∏–¥—ë—Ç). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ A/B –∏ seq. –ù–∞–∂–º–∏—Ç–µ ‚Üª –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
			else:
				self._set_status(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–µ—Ä–µ–æ–ø–∞—Ä >{int(self.stop_warn_after)}—Å (–ø—Ä–∏—ë–º –∏–¥—ë—Ç). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ A/B –∏ seq. –ù–∞–∂–º–∏—Ç–µ ‚Üª –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.", hold_sec=3.0)
			self.last_diag_t = now2
			# –ü–æ–ø—Ä–æ–±—É–µ–º –º—è–≥–∫–æ –ø–Ω—É—Ç—å –ø–æ—Ç–æ–∫ (–±–µ–∑ STOP), –Ω–æ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ diag_interval
			if self.auto_soft_kick and (now2 - self.last_soft_kick_t) > max(2.0, self.diag_interval):
				try:
					self._set_status("–ú—è–≥–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç –ø–æ—Ç–æ–∫–∞‚Ä¶", hold_sec=1.0)
					self._soft_kick_stream()
					self.last_soft_kick_t = time.time()
				except Exception as e:
					print("[kick] soft restart failed:", e)

		# –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: –µ—Å–ª–∏ hold –∏—Å—Ç—ë–∫, –æ—á–∏—Å—Ç–∏—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π FPS-—Å—Ç–∞—Ç—É—Å
		if self._status_hold_text is not None and time.time() >= self._status_hold_until:
			self._status_hold_text = None
			# –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏–º –ø–æ–¥–ø–∏—Å—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
			buf_info = ""
			if self.base_buf_len is not None:
				freq_part = f" FREQ:{self.freq_hz}Hz" if self.freq_hz else ""
				buf_info = f" BUF:{self.base_buf_len}({self.base_buf_len_bytes}B){freq_part}"
			_default_status = f"FPS:{self.fps:.1f} CH0:{len(self.data0)} GAP:{self.gap_count} SEQ:{self.last_seq} VIEW[{self.view_start}:{self.view_start+self.view_len}]{buf_info}"
			self._set_status(_default_status)

	def _update_view(self):
		"""–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –æ–∫–Ω–æ –ø–æ —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º (–±–µ–∑ —á—Ç–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)."""
		if self.base_buf_len is None or self.max_samples == 0:
			return
		vlen = max(1, min(self.view_len, self.base_buf_len))
		max_start = max(0, len(self.data0) - vlen)
		self.slider_start.setMaximum(max(0, self.base_buf_len - vlen))
		self.view_start = min(self.view_start, max_start)
		vlen = min(vlen, len(self.data0) - self.view_start)  # –Ω–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		self.view_len = vlen
		seg0 = self.data0[self.view_start:self.view_start+vlen]
		seg1 = self.data1[self.view_start:self.view_start+vlen]
		x = np.arange(vlen)
		if len(seg0) > 0 and (self.show_zero or not np.all(seg0 == 0)):
			self.curve0.setData(x, seg0)
		else:
			self.curve0.setData([], [])
		if len(seg1) > 0 and (self.show_zero or not np.all(seg1 == 0)):
			self.curve1.setData(x, seg1)
		else:
			self.curve1.setData([], [])
		self.lbl_start_value.setText(str(self.view_start))
		self.lbl_len_value.setText(str(vlen))
		self._apply_x_range(0, self.view_len or self.initial_expected)

	def _apply_x_range(self, start: float, end: float):
		"""–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω X, —á—Ç–æ–±—ã –≥—Ä–∞—Ñ–∏–∫ –Ω–µ '—É–ª–µ—Ç–∞–ª'."""
		try:
			if end <= start:
				return
			# –º–µ–Ω—è–µ–º X-–¥–∏–∞–ø–∞–∑–æ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–µ—Ä—Ü–∞–Ω–∏—è
			vr0 = self.p0.viewRange()[0]
			if abs(vr0[0] - start) > 1e-6 or abs(vr0[1] - end) > 1e-6:
				self.p0.setXRange(start, end, padding=0.0)
				self.p1.setXRange(start, end, padding=0.0)
		except Exception:
			pass

	def _apply_x_axis_mode(self):
		"""–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X: —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ —Å–µ–º–ø–ª–æ–≤ (—Ü–µ–ª—ã–µ)."""
		try:
			ax0 = self.p0.getAxis('bottom')
			ax1 = self.p1.getAxis('bottom')
			# –ù–∏–∫–∞–∫–∏—Ö SI-–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
			try:
				ax0.enableAutoSIPrefix(False)
				ax1.enableAutoSIPrefix(False)
			except Exception:
				pass
			ax0.setLabel("samples")
			ax1.setLabel("samples")
			def _int_ticks(values, scale, spacing):
				labels = []
				for v in values:
					try:
						labels.append(str(int(round(v))))
					except Exception:
						labels.append(str(v))
				return labels
			ax0.tickStrings = _int_ticks
			ax1.tickStrings = _int_ticks
		except Exception:
			pass

 

	def _set_status(self, text: str, hold_sec: float | None = None):
		"""–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–µ—Ä–∂–∞–Ω–∏—è, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –º–∏–≥–∞–ª.

		–ï—Å–ª–∏ hold_sec –∑–∞–¥–∞–Ω–æ, —Ç–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω
		–¥–µ—Ñ–æ–ª—Ç–Ω—ã–º FPS-—Å—Ç–∞—Ç—É—Å–æ–º, –ø–æ–∫–∞ —Ç–∞–π–º–µ—Ä –Ω–µ –∏—Å—Ç–µ—á—ë—Ç. –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è,
		—á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫.
		"""
		try:
			# –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω hold –∏ –æ–Ω –µ—â—ë –Ω–µ –∏—Å—Ç—ë–∫, –Ω–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞—Ç—å –¥—Ä—É–≥–∏–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ hold
			now = time.time()
			if self._status_hold_text is not None and now < self._status_hold_until:
				# –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ç–∞–∫–∂–µ —Å hold –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî –æ–±–Ω–æ–≤–∏–º
				if hold_sec and text != self._status_hold_text:
					self._status_hold_text = text
					self._status_hold_until = now + max(0.5, hold_sec)
					if text != self._last_status_text:
						self.legend_lbl.setText(text)
						self._last_status_text = text
				return
			# —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º –µ—Å–ª–∏ hold –Ω–µ—Ç –∏–ª–∏ –∏—Å—Ç—ë–∫ ‚Äî –ø—Ä–∏–º–µ–Ω–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
			if hold_sec:
				self._status_hold_text = text
				self._status_hold_until = now + max(0.5, hold_sec)
			if text != self._last_status_text:
				self.legend_lbl.setText(text)
				self._last_status_text = text
		except Exception:
			pass

	def _on_slider_start(self, val:int):
		self.view_start = val
		self._update_view()

	def _on_slider_len(self, val:int):
		self.view_len = val
		# –æ–±–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
		if self.base_buf_len:
			self.slider_start.setMaximum(max(0, self.base_buf_len - self.view_len))
		self._update_view()

	def _manual_reconnect(self):
		# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∏ –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
		try:
			if self.stream:
				self.stream.close()
		except Exception:
			pass
		self.stream = None
		self.base_buf_len = None
		self.base_buf_len_bytes = None
		self.freq_hz = None
		self.data0 = np.zeros(0, dtype=np.int16)
		self.data1 = np.zeros(0, dtype=np.int16)
		self.timestamps = np.zeros(0, dtype=np.float64)
		self._last_sample_ts = None
		self.view_start = 0
		self.view_len = 0
		self.slider_start.setEnabled(False)
		self.slider_len.setEnabled(False)
		self.slider_start.setMaximum(0)
		self.slider_len.setMaximum(0)
		self.slider_len.setValue(0)
		self.slider_start.setValue(0)
		if self.num_group.checkedId() == 1:
			self._set_status("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶", hold_sec=1.5)
			self._activate_stream()
		else:
			self.legend_lbl.setText("–ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è –∑–∞–ø—É—Å–∫–∞")

	def _soft_kick_stream(self):
		"""–ú—è–≥–∫–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å START –±–µ–∑ STOP, —á—Ç–æ–±—ã –Ω–µ —Ä–æ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
		if self.stream is None:
			raise RuntimeError("–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
		# –ü–æ–≤—Ç–æ—Ä–∏–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏ Ns –∏ –æ—Ç–ø—Ä–∞–≤–∏–º START
		try:
			# –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π SOFT_RESET, –µ—Å–ª–∏ –ø—Ä–æ—à–∏–≤–∫–∞ –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
			try:
				if hasattr(self.stream, 'soft_reset'):
					self.stream.soft_reset()
					try:
						import time as _t
						_t.sleep(0.05)
					except Exception:
						pass
			except Exception:
				pass
			# –ø—Ä–æ—Ñ–∏–ª—å
			self.stream.send_cmd(CMD_SET_PROFILE, bytes([self.desired_profile]))
			try:
				import time as _t
				_t.sleep(0.02)
			except Exception:
				pass
			# —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ –¥–ª—è ~20 FPS
			try:
				from usb_vendor.usb_stream import CMD_SET_FRAME_SAMPLES  # type: ignore
			except Exception:
				CMD_SET_FRAME_SAMPLES = 0x17
			ns = self.ns_map.get(self.desired_profile)
			if ns:
				self.stream.send_cmd(CMD_SET_FRAME_SAMPLES, int(ns).to_bytes(2,'little'))
				try:
					import time as _t
					_t.sleep(0.02)
				except Exception:
					pass
			# —Å—Ç–∞—Ä—Ç
			self.stream.send_cmd(CMD_START_STREAM, b"")
		except Exception as e:
			raise

	def _diagnose_and_kick(self):
		"""–ü—Ä–æ–≤–µ—Ä–∏—Ç—å EP0, –≤—ã–ø–æ–ª–Ω–∏—Ç—å DEEP_RESET, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å alt=1, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫.

		–ê–ª–≥–æ—Ä–∏—Ç–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Ç–∫–∏.
		"""
		if self.stream is None:
			self._set_status("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞. –ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.", hold_sec=2.0)
			return
		# –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å EP0
		try:
			# –ü–æ–ª—É—á–∏–º STAT —á–µ—Ä–µ–∑ EP0 (recipient: interface)
			if hasattr(self.stream, '_get_status_ep0'):
				self.stream._get_status_ep0()
			self._set_status("EP0 –ø—Ä–æ–≤–µ—Ä–µ–Ω, STAT –ø–æ–ª—É—á–µ–Ω‚Ä¶", hold_sec=0.5)
		except Exception as e:
			self._set_status(f"EP0 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –û–° –∏–ª–∏ power cycle.", hold_sec=2.0)
			# –°—Ä–∞–∑—É –ø–æ–ø—Ä–æ–±—É–µ–º power cycle
			try:
				self._power_cycle_usb_port()
				return
			except Exception as pc_e:
				self._set_status(f"Power cycle –Ω–µ —É–¥–∞–ª—Å—è: {pc_e}. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π —Å–±—Ä–æ—Å.", hold_sec=5.0)
			return
		# –®–∞–≥ 2: DEEP_RESET
		try:
			if hasattr(self.stream, 'deep_reset'):
				self._set_status("DEEP_RESET‚Ä¶", hold_sec=0.8)
				self.stream.deep_reset()
				time.sleep(0.1)  # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ DEEP_RESET
			else:
				self._set_status("DEEP_RESET –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—é‚Ä¶", hold_sec=0.5)
		except Exception as e:
			self._set_status(f"DEEP_RESET failed: {e}", hold_sec=1.0)
		# –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å alt=1
		try:
			if hasattr(self.stream, 'set_alt'):
				self._set_status("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ alt=1‚Ä¶", hold_sec=0.5)
				self.stream.set_alt(1)
				time.sleep(0.05)
			else:
				self._set_status("set_alt –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—é‚Ä¶", hold_sec=0.5)
		except Exception as e:
			self._set_status(f"set_alt failed: {e}", hold_sec=1.0)
		# –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ GET_STATUS
		try:
			if hasattr(self.stream, '_get_status_ep0'):
				self.stream._get_status_ep0()
			time.sleep(0.05)  # –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ STAT
			st = getattr(self.stream, 'last_stat', None)
			if isinstance(st, (bytes, bytearray)) and len(st) >= 64 and st[:4] == b'STAT':
				# STAT v1: flags_runtime 48:50 (u16), flags2 50:52 (u16), sending_ch @52 (u8), reserved2 @53 (u8)
				flags_runtime = int.from_bytes(st[48:50], 'little')
				hang_latched = (flags_runtime & 0x0004) != 0
				flags2 = int.from_bytes(st[50:52], 'little')
				alt1 = (flags2 >> 15) & 1
				sending_ch = st[52]
				reserved2 = st[53]
				out_armed = (reserved2 >> 7) & 1
				deep_reset_count_mod4 = reserved2 & 3
				print(f"[diag] STAT parsed: alt1={alt1}, out_armed={out_armed}, hang_latched={hang_latched}, sending_ch={sending_ch}, deep_reset_count_mod4={deep_reset_count_mod4}")
				if alt1 == 1 and out_armed == 1:
					status_msg = f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (alt1=1, out_armed=1"
					if hang_latched:
						status_msg += ", hang_latched=1"
					if deep_reset_count_mod4:
						status_msg += f", deep_resets={deep_reset_count_mod4}"
					status_msg += "). –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞‚Ä¶"
					self._set_status(status_msg, hold_sec=1.0)
					# –®–∞–≥ 5: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫
					try:
						self._soft_kick_stream()
						self.last_soft_kick_t = time.time()
						self._set_status("–ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ—à–ª–∏. –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö‚Ä¶", hold_sec=1.5)
						return
					except Exception as e:
						self._set_status(f"START failed: {e}", hold_sec=1.0)
				else:
					self._set_status(f"–ù–µ –≥–æ—Ç–æ–≤–æ: alt1={alt1}, out_armed={out_armed}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ alt toggle‚Ä¶", hold_sec=1.0)
			else:
				self._set_status("STAT –Ω–µ –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ alt=1. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞‚Ä¶", hold_sec=1.0)
		except Exception as e:
			self._set_status(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ failed: {e}", hold_sec=1.0)
		# Fallback: Alt toggle
		try:
			if hasattr(self.stream, 'set_alt'):
				self._set_status("Alt toggle 0‚Üí1‚Ä¶", hold_sec=0.8)
				self.stream.set_alt(0)
				time.sleep(0.03)
				self.stream.set_alt(1)
				time.sleep(0.05)
				self._soft_kick_stream()
				self._set_status("Alt toggle + kick –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –û–∂–∏–¥–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶", hold_sec=1.2)
				return
		except Exception as e:
			pass
		# –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å: Power cycle
		try:
			self._power_cycle_usb_port()
			return
		except Exception as pc_e:
			self._set_status(f"–í—Å–µ –º–µ—Ç–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å: {pc_e}. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π —Å–±—Ä–æ—Å.", hold_sec=5.0)

	def _power_cycle_usb_port(self):
		"""–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø–∏—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π USB-–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ uhubctl.

		–ê–ª–≥–æ—Ä–∏—Ç–º:
		- —É–∑–Ω–∞—ë–º —Ç–æ–ø–æ–ª–æ–≥–∏—é —É —Ç–µ–∫—É—â–µ–≥–æ stream (bus, hub_loc, hub_port)
		- –ø—ã—Ç–∞–µ–º—Å—è `uhubctl -l <hub_loc> -p <port> -a off/on` (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
		- –µ—Å–ª–∏ uhubctl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PPS ‚Äì fallback —á–µ—Ä–µ–∑ sysfs:
		  /sys/bus/usb/devices/<port_path>/authorized 0/1, –∑–∞—Ç–µ–º unbind/bind
		- –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
		"""
		if self.stream is None and self.last_port_info is None:
			self._set_status("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç–µ. –ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.", hold_sec=2.0)
			return
		try:
			info = {}
			try:
				if self.stream is not None:
					info = self.stream.get_port_path_info()
				else:
					info = self.last_port_info
			except Exception:
				info = self.last_port_info if self.last_port_info else {}
			hub_loc = info.get('hub_loc')
			hub_port = info.get('hub_port')
			port_path = info.get('port_path')  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "1-1.3.2"
			if not hub_loc or not hub_port:
				self._set_status("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç —Ö–∞–±–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo uhubctl", hold_sec=3.0)
				return
			if self.stream is not None:
				# –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫ –ø—Ä–µ–∂–¥–µ —á–µ–º –¥—ë—Ä–≥–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ
				try:
					self.stream.close()
				except Exception:
					pass
				self.stream = None
			import subprocess, shlex, shutil, time as _t, os as _os
			# –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ uhubctl (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
			uh_path = shutil.which("uhubctl")
			uh_ok = False
			uh_err = ""
			if uh_path:
				self._set_status(f"–û—Ç–∫–ª—é—á–∞—é –ø–∏—Ç–∞–Ω–∏–µ USB {hub_loc} –ø–æ—Ä—Ç {hub_port} —á–µ—Ä–µ–∑ uhubctl‚Ä¶", hold_sec=2.0)
				cmd_off = f"sudo {uh_path} -l {hub_loc} -p {hub_port} -a off"
				cmd_on  = f"sudo {uh_path} -l {hub_loc} -p {hub_port} -a on"
				try:
					res_off = subprocess.run(shlex.split(cmd_off), capture_output=True, text=True, timeout=6)
					_off_rc = res_off.returncode
					_off_out = (res_off.stdout or "") + ("\n" + (res_off.stderr or ""))
					_t.sleep(1.0)
					res_on = subprocess.run(shlex.split(cmd_on), capture_output=True, text=True, timeout=6)
					_on_rc = res_on.returncode
					_on_out = (res_on.stdout or "") + ("\n" + (res_on.stderr or ""))
					uh_ok = (_off_rc == 0 and _on_rc == 0)
					# –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: "No compatible devices", "not found", "Permission denied"
					if ("No compatible" in _off_out) or ("No compatible" in _on_out) or ("not found" in _off_out) or ("not found" in _on_out) or ("Permission denied" in _off_out) or ("Permission denied" in _on_out):
						uh_ok = False
					if not uh_ok:
						uh_err = f"uhubctl rc off:{_off_rc} on:{_on_rc}. off_out: {_off_out.strip()} | on_out: {_on_out.strip()}"
				except Exception as e:
					uh_err = f"uhubctl exec error: {e}"
			# –ï—Å–ª–∏ uhubctl –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî fallback —á–µ—Ä–µ–∑ sysfs
			if not uh_ok:
				if not uh_path:
					print("[power] uhubctl –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. apt install uhubctl –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Ç–∫–∏ PPS-—Ö–∞–±–æ–≤.")
				else:
					print("[power] uhubctl failed:", uh_err)
				# –ù—É–∂–µ–Ω port_path –≤–∏–¥–∞ "1-1.3.2" –¥–ª—è sysfs
				if not port_path:
					self._set_status("–ù–µ—Ç port_path –¥–ª—è sysfs fallback. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ uhubctl –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ PPS-—Ö–∞–±.", hold_sec=3.0)
					return
				dev_dir = f"/sys/bus/usb/devices/{port_path}"
				auth_file = f"{dev_dir}/authorized"
				self._set_status("–ü—Ä–æ–±—É—é –æ—Ç–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ sysfs authorized‚Ä¶", hold_sec=2.0)
				# authorized 0/1 —á–µ—Ä–µ–∑ tee (—á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å /bin/sh –≤ sudoers)
				try:
					is_root = False
					try:
						is_root = (os.geteuid() == 0)
					except Exception:
						pass
					if is_root:
						res0 = subprocess.run(["tee", auth_file], input="0\n", text=True, capture_output=True, timeout=6)
					else:
						res0 = subprocess.run(["sudo", "tee", auth_file], input="0\n", text=True, capture_output=True, timeout=6)
					_t.sleep(0.8)
					if is_root:
						res1 = subprocess.run(["tee", auth_file], input="1\n", text=True, capture_output=True, timeout=6)
					else:
						res1 = subprocess.run(["sudo", "tee", auth_file], input="1\n", text=True, capture_output=True, timeout=6)
					if res0.returncode != 0 or res1.returncode != 0:
						raise RuntimeError(f"authorized rc0={res0.returncode} rc1={res1.returncode} out0={res0.stderr or res0.stdout} out1={res1.stderr or res1.stdout}")
					auth_ok = True
				except Exception as e_auth:
					print("[power] sysfs authorized failed:", e_auth)
					# –ü–æ–ø—Ä–æ–±—É–µ–º unbind/bind —á–µ—Ä–µ–∑ tee
					self._set_status("authorized –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é unbind/bind‚Ä¶", hold_sec=2.0)
					try:
						ub = "/sys/bus/usb/drivers/usb/unbind"
						bb = "/sys/bus/usb/drivers/usb/bind"
						is_root = False
						try:
							is_root = (os.geteuid() == 0)
						except Exception:
							pass
						if is_root:
							res_u = subprocess.run(["tee", ub], input=f"{port_path}\n", text=True, capture_output=True, timeout=6)
						else:
							res_u = subprocess.run(["sudo", "tee", ub], input=f"{port_path}\n", text=True, capture_output=True, timeout=6)
						_t.sleep(0.8)
						if is_root:
							res_b = subprocess.run(["tee", bb], input=f"{port_path}\n", text=True, capture_output=True, timeout=6)
						else:
							res_b = subprocess.run(["sudo", "tee", bb], input=f"{port_path}\n", text=True, capture_output=True, timeout=6)
						if res_u.returncode != 0 or res_b.returncode != 0:
							raise RuntimeError(f"unbind/bind rcU={res_u.returncode} rcB={res_b.returncode} outU={res_u.stderr or res_u.stdout} outB={res_b.stderr or res_b.stdout}")
						print("[power] unbind/bind OK")
					except Exception as e_ub:
						self._set_status(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç: {e_ub}", hold_sec=3.0)
						return
			else:
				self._set_status("–ü–∏—Ç–∞–Ω–∏–µ —á–µ—Ä–µ–∑ uhubctl –≤–∫–ª—é—á–µ–Ω–æ. –ñ–¥—É –ø–µ—Ä–µ—ç–Ω—É–º–µ—Ä–∞—Ü–∏–∏‚Ä¶", hold_sec=2.0)
			# –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –∏ –æ–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
			_t.sleep(1.0)
			self._activate_stream()
		except Exception as e:
			self._set_status(f"Power-cycle –æ—à–∏–±–∫–∞: {e}", hold_sec=3.0)

	def _try_connect(self, first=False):
		if self.num_group.checkedId() != 1:
			return
		if self._connecting or self.stream is not None:
			return
		self._connecting = True
		msg_prefix = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" if not first else "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
		try:
			self._set_status(f"{msg_prefix} –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É‚Ä¶", hold_sec=1.5)
			# –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ running –≤ –º–æ–¥—É–ª–µ usb_stream (–ø–æ—Å–ª–µ close() –æ–Ω –º–æ–≥ —Å—Ç–∞—Ç—å False)
			try:
				import usb_vendor.usb_stream as _usm  # type: ignore
				if getattr(_usm, 'running', True) is False:
					_usm.running = True
			except Exception:
				pass
			# –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Ns –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π FPS). –ü–æ–¥—Å–∫–∞–∑–∫—É Ns –≤–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ BMI30_SEND_NS=1
			fs = self.ns_map.get(self.desired_profile) if self.send_ns else None
			self.stream = USBStream(profile=self.desired_profile, full=True, test_as_data=self.test_as_data, frame_samples=fs)
			# –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ—Ä—Ç info –¥–ª—è power cycle –±–µ–∑ stream
			self.last_port_info = self.stream.port_info
			self._set_status("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö‚Ä¶", hold_sec=1.5)
			self.connect_t = time.time()
			self.last_frame_t = 0
			self.no_data_warned = False
		except SystemExit as se:
			self.stream = None
			self._set_status(str(se), hold_sec=2.0)
		except Exception as e:
			self.stream = None
			self._set_status(f"–ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({e})", hold_sec=2.0)
		finally:
			self._connecting = False
			if self.stream is None:
				if not self.usb_retry_timer.isActive():
					self.usb_retry_timer.start()
			else:
				self.usb_retry_timer.stop()

	def _activate_stream(self):
		if not self.usb_retry_timer.isActive():
			self.usb_retry_timer.start()
		self._try_connect(first=True)
		# –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π START —Å–∞–º.
		# –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º SET_PROFILE/START –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ A/B –∫–∞–¥—Ä—ã.
		if self.stream is not None:
			# –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ —á–∏—Å–ª–æ —Å–µ–º–ø–ª–æ–≤ –æ–¥–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
			expected = self.expected_len_map.get(self.desired_profile, self.initial_expected)
			freq = 200 if self.desired_profile == 1 else 300 if self.desired_profile == 2 else None
			msg = f"–°—Ç–∞—Ä—Ç –ø–æ—Ç–æ–∫–∞‚Ä¶ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö‚Ä¶ BUF‚âà{expected} —Å–µ–º–ø–ª–æ–≤"
			if freq:
				msg += f" (–ø—Ä–æ—Ñ–∏–ª—å {freq} –ì—Ü)"
			self._set_status(msg, hold_sec=1.5)
			try:
				print(f"[start] –ü—Ä–æ—Ñ–∏–ª—å={self.desired_profile} –æ–∂–∏–¥–∞–µ–º—ã–π BUF={expected} —Å–µ–º–ø–ª–æ–≤")
			except Exception:
				pass

	def _on_freq_change(self, idx:int):
		# 0 -> 200Hz (profile 1), 1 -> 300Hz (profile 2)
		self.desired_profile = 1 if idx == 0 else 2
		if self.stream is None:
			self._set_status(f"–í—ã–±—Ä–∞–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ {200 if idx==0 else 300} –ì—Ü (–Ω–∞–∂–º–∏—Ç–µ 1 –¥–ª—è –∑–∞–ø—É—Å–∫–∞)")
			return
		# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–µ—Ç—É: –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∏ –∑–∞–ø—É—Å—Ç–∏–º —Å–Ω–æ–≤–∞ –±—ã—Å—Ç—Ä–æ
		try:
			# –ú—è–≥–∫–∏–π —Ä–µ-—Å—Ç–∞—Ä—Ç –±–µ–∑ —è–≤–Ω–æ–≥–æ STOP, —á—Ç–æ–±—ã –Ω–µ —Ä–æ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (ENODEV)
			self.stream.send_cmd(CMD_SET_PROFILE, bytes([self.desired_profile]))
			# –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–∞—ë—Ç –ø—Ä–æ—à–∏–≤–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
			try:
				import time as _t
				_t.sleep(0.02)
			except Exception:
				pass
			# –û–±–Ω–æ–≤–∏–º –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ –ø–æ–¥ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–¥–ª—è ~20 FPS)
			try:
				from usb_vendor.usb_stream import CMD_SET_FRAME_SAMPLES  # type: ignore
			except Exception:
				CMD_SET_FRAME_SAMPLES = 0x17
			ns = self.ns_map.get(self.desired_profile)
			if ns:
				self.stream.send_cmd(CMD_SET_FRAME_SAMPLES, int(ns).to_bytes(2,'little'))
				try:
					import time as _t
					_t.sleep(0.02)
				except Exception:
					pass
			self.stream.send_cmd(CMD_START_STREAM, b"")
			self._set_status(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ {200 if idx==0 else 300} –ì—Ü, –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö‚Ä¶", hold_sec=1.5)
			self.base_buf_len = None
			self.base_buf_len_bytes = None
			self.freq_hz = None
			self.max_samples = 0
			self.data0 = np.zeros(0, dtype=np.int16)
			self.data1 = np.zeros(0, dtype=np.int16)
			self.timestamps = np.zeros(0, dtype=np.float64)
			self._last_sample_ts = None
			self.view_len = 0
			self.slider_start.setEnabled(False)
			self.slider_len.setEnabled(False)
			self.connect_t = time.time()
			self.last_frame_t = 0
			self.no_data_warned = False
		except Exception as e:
			self._set_status(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —á–∞—Å—Ç–æ—Ç—ã: {e}", hold_sec=2.0)

	def _on_close(self, ev):
		try:
			self.stream.close()
		except Exception:
			pass
		ev.accept()

	def run(self):
		self.win.resize(900, 600)
		self.win.show()
		# –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π Qt –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–∞–∫ –¥–ª—è PyQt5 (exec_()), —Ç–∞–∫ –∏ –¥–ª—è PyQt6 (exec())
		_app = QtWidgets.QApplication.instance()
		if hasattr(_app, 'exec_'):
			_app.exec_()
		else:
			_app.exec()


def main():
	if PG_IMPORT_ERR:
		print('[fatal] pyqtgraph/Qt –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. pip install pyqtgraph PyQt5')
		return 2
	ScopeWindow().run()
	return 0


if __name__ == '__main__':
	sys.exit(main())
